<?php

/**
 * Implements hook_menu().
 */
function custodian_menu() {
  $items = array();

	$items ['admin/cowpro/config_custodian'] = array (
			'title' => '选择第三方托管服务商',
			'description' => '指定第三方资金托管服务商',
			'page callback' => 'drupal_get_form',
			'page arguments' => array (
					'custodian_settings_form'
			),
			'access arguments' => array (
					'configure p2p'
			),
			'type' => MENU_NORMAL_ITEM,
			'file' => 'custodian.admin.inc'
	);
	$items['admin/cowpro/config_custodian/%'] = array(
			'title callback' => 'custodian_readable_provider_title',
			'title arguments' => array(3),
			'page callback' => 'drupal_get_form',
			'page arguments' => array('custodian_admin_provider_form', 3),
			'access arguments' => array (
					'configure p2p'
			),
			'type' => MENU_CALLBACK,
			'file' => 'custodian.admin.inc',
	);

  return $items;
}

/**
 * Custodian provider menu title callback.
 */
function custodian_admin_provider_title($provider_id) {
	$provider = custodian_providers('provider', $provider_id);
	return sprintf('%s 第三方托管', $provider['name']);
}

/**
 * Returns the current default provider info.
 */
function custodian_default_provider_info() {
  return custodian_providers('provider', variable_get('custodian_default_provider', 'cash_pooling'));
}

/**
 * Returns the current default provider key.
 */
function custodian_default_provider_key() {
  $provider = custodian_providers('provider', variable_get('custodian_default_provider', 'cash_pooling'));
  return $provider['identifier'];
}

/**
 * 缺省的第三方托管服务商的名字（显示给用户的，具有可读性的）
 * 在充值、提现等界面中，会调用该方法以便显示当前正在使用的第三方托管服务商的名字
 * @param unknown $provider_id
 */
function custodian_readable_provider_title($provider_id) {
  $provider = custodian_providers('provider', $provider_id);
  return sprintf('%s', $provider['name']);
}

/**
 * Gets a list of all providers.
 *
 * @param string $op
 *   (optional) The format in which to return the list. When set to 'provider' or 'name',
 *   only the specified provider is returned. When set to 'providers' or 'names',
 *   all providers are returned. Defaults to 'providers'.
 * @param string $provider
 *   (optional) A provider identifier string that indicates the provider to return.
 *   Leave at default value (NULL) to return all providers.
 *
 * @return array|string
 *   Either an array of all providers or a single gateway, in a variable format.
 */
function custodian_providers($op = 'providers', $provider = NULL) {
	if ($provider == NULL) {
		$provider_key = custodian_default_provider_key();
	} else {
		$provider_key = $provider;
	}
  list($_providers, $_names) = _providers_build();

  switch ($op) {
    case 'provider':
      $return = $_providers[$provider_key];
      $return['identifier'] = $provider_key;
      return $return;
    case 'names':
      return $_names;
    case 'name':
      return $_names[$provider_key];
    case 'providers':
    default:
      return $_providers;
  }
}

/**
 * Helper function to get provider definitions in hook_provider_info.
 *
 * @return array
 *   A array of provider definitions from hook_provider_info().
 */
function _providers_build() {
  $_providers = array();
  $_names = array();

  $provider_array = module_invoke_all('provider_info');
  foreach ($provider_array as $identifier => $info) {
    $_providers[$identifier] = $info;
    $_names[$identifier] = $info['name'];
  }

  asort($_names);

  return array($_providers, $_names);
}

/**
 * 充值
 * @param $uid 充值用户的uid
 * @param $amount 充值金额
 * @param $method 充值途径(快捷支付,网银充值,汇款充值,企业网银)
 * @param $journal_id 日记账编号
 * @return unknown
 */
function custodian_cowpro_fund_topup($uid, $amount, $method, $journal_id) {
	$module = custodian_default_provider_key();
	$function = $module . '_cowpro_fund_topup';
	if (function_exists($function)) {
		$result = $function($uid, $amount, $method, $journal_id);
		return $result;
	} else {
		$msg = array(
				'%function' => $function,
		);
		watchdog('custodian', '方法"%function"未定义', $msg, WATCHDOG_ERROR);
	}
}

/**
 * 充值方法的回调函数
 */
function custodian_cowpro_fund_topup_callback($success, $journal_id, $external_reference_id, $interface_module, $result) {
	cowpro_fund_topup_callback($success, $journal_id, $external_reference_id, $interface_module, $result);
}

/**
 * 提现
 * @param $uid 提现用户的uid
 * @param $amount 提现金额
 * @param $fee 提现手续费
 * @param $bankcard 提现银行卡号码
 * @param $journal_id 日记账编号
 * @return unknown
 */
function custodian_cowpro_fund_withdraw($uid, $amount, $fee, $bankcard, $journal_id) {
	$module = custodian_default_provider_key();
	$function = $module . '_cowpro_fund_withdraw';
	if (function_exists($function)) {
		$result = $function($uid, $amount, $fee, $bankcard, $journal_id);
		return $result;
	} else {
		$msg = array(
				'%function' => $function,
		);
		watchdog('custodian', '方法"%function"未定义', $msg, WATCHDOG_ERROR);
	}
}

/**
 * 提现方法的回调函数
 */
function custodian_cowpro_fund_withdraw_callback($success, $journal_id, $external_reference_id, $interface_module, $result) {
	cowpro_fund_withdraw_callback($success, $journal_id, $external_reference_id, $interface_module, $result);
}

/**
 * 内部转账
 * @param $uid_from 转出用户的uid
 * @param $uid_to 转入用户的uid
 * @param $amount 转账金额
 * @param string $comment 备注
 * @return unknown
 */
function custodian_cowpro_fund_internal_trans($uid_from, $uid_to, $amount, $comment='') {
	$module = custodian_default_provider_key();
	$function = $module . '_cowpro_fund_internal_trans';
	if (function_exists($function)) {
		$result = $function($uid_from, $uid_to, $amount);
		if ($result['success'] === TRUE) {
			if ($uid_from != NULL) {
				$uname_from = user_load($uid_from)->name;
				$uname_to = user_load($uid_to)->name;
				//$transfer = "($uname_from [$uid_from] -> $uname_to [$uid_to])";
			} else {
				$uname_to = user_load($uid_to)->name;
				//$transfer = "(平台帐户 -> $uname_to [$uid_to])";
			}

			if ($uid_from != NULL) {
				$uid = $uid_from;
				$entity_value = array(
						'uid' => $uid,
						'status' => TRUE,
						'type' => 'INTERNAL_TRANS',
						'amount' => 0 - $amount,
				);
				$entity = entity_create('cowpro_fund_journal', $entity_value);
				$data = array();
				$data['interface_module'] = $module;
				$data['result'] = $result;
				$data['comment'] = $comment . $transfer;
				$entity->data = $data;
				$entity = entity_get_controller('cowpro_fund_journal')->save($entity);
			}

			$uid = $uid_to;
			$entity_value = array(
					'uid' => $uid,
					'status' => TRUE,
					'type' => 'INTERNAL_TRANS',
					'amount' => $amount,
			);
			$entity = entity_create('cowpro_fund_journal', $entity_value);
			$data = array();
			$data['interface_module'] = $module;
			$data['result'] = $result;
			$data['comment'] = $comment . $transfer;
			$entity->data = $data;
			$entity = entity_get_controller('cowpro_fund_journal')->save($entity);
		}
		return $result;
	} else {
		$msg = array(
				'%function' => $function,
		);
		watchdog('custodian', '方法"%function"未定义', $msg, WATCHDOG_ERROR);
	}
}

/**
 * 内部转账方法的回调函数
 */
function custodian_cowpro_internal_trans_callback($success, $uid_from, $uid_to, $amount, $interface_module, $result) {
	cowpro_fund_internal_trans_callback($success, $uid_from, $uid_to, $amount, $interface_module, $result);
}

/**
 * 投标
 * @param $uid 投标用户的uid
 * @param $amount 投标金额
 * @param $nid 标的编号
 * @param $journal_id 日记账编号
 * @return unknown
 */
function custodian_cowpro_fund_bid($uid, $amount, $nid, $journal_id) {
	$module = custodian_default_provider_key();
	$function = $module . '_cowpro_fund_bid';
	if (function_exists($function)) {
		$result = $function($uid, $amount, $nid, $journal_id);
		return $result;
	} else {
		$msg = array(
				'%function' => $function,
		);
		watchdog('custodian', '方法"%function"未定义', $msg, WATCHDOG_ERROR);
	}
}

/**
 * 将标的信息同步到第三方托管服务商
 * @param $nid 标的编号
 * @return 如果托管方同步成功，返回 TRUE，否则返回 FALSE
 */
function custodian_cowpro_fund_issuing_publish($nid) {
	$module = custodian_default_provider_key();
	$function = $module . '_cowpro_fund_issuing_publish';
	if (function_exists($function)) {
		$result = $function($nid);
		return $result;
	} else {
		$msg = array(
				'%function' => $function,
		);
		watchdog('custodian', '方法"%function"未定义', $msg, WATCHDOG_ERROR);
	}
}

/**
 * 判断当前的第三方托管系统是否有“标的信息同步”的接口
 * @return 如果有“标的信息同步”的接口，返回 TRUE，否则返回 FALSE
 */
function custodian_cowpro_fund_issuing_publish_defined() {
	$module = custodian_default_provider_key();
	$function = $module . '_cowpro_fund_issuing_publish';
	if (function_exists($function)) {
		return TRUE;
	} else {
		return FALSE;
	}
}

/**
 * 标的信息同步操作已成功
 * @param $nid 标的编号
 * @return 如果托管方同步操作已完成，返回 TRUE，否则返回 FALSE
 */
/*
function custodian_cowpro_fund_issuing_publish_succeed($nid) {
	$module = custodian_default_provider_key();
	$function = $module . '_cowpro_fund_issuing_publish_succeed';
	if (function_exists($function)) {
		$result = $function($nid);
		return $result;
	} else {
		return TRUE;
	}
}
*/

/**
 * 流标还款
 * @param $nid 标的编号
 * @return unknown
 */
function custodian_cowpro_fund_issuing_failing($nid) {
	$module = custodian_default_provider_key();
	$function = $module . '_cowpro_fund_issuing_failing';
	if (function_exists($function)) {
		$result = $function($nid);
		return $result;
	} else {
		$msg = array(
				'%function' => $function,
		);
		watchdog('custodian', '方法"%function"未定义', $msg, WATCHDOG_ERROR);
	}
}

/**
 * 满标放款
 * @param $nid 标的编号
 * @return unknown
 */
function custodian_cowpro_fund_make_loans_to($nid) {
	$module = custodian_default_provider_key();
	$function = $module . '_cowpro_fund_make_loans_to';
	if (function_exists($function)) {
		$result = $function($nid);
		return $result;
	} else {
		$msg = array(
				'%function' => $function,
		);
		watchdog('custodian', '方法"%function"未定义', $msg, WATCHDOG_ERROR);
	}
}

/**
 * 到期还款
 * @param $repayment_schedules 还款计划表的列表
 * @return unknown
 */
function custodian_cowpro_fund_repayment($repayment_schedules) {
	//TODO _cowpro_issuing_repayment_form_submit()对该方法的调用传入的参数与这里不一致
	//并且，_cowpro_issuing_repayment_form_submit没有判断还款操作的结果
	$module = custodian_default_provider_key();
	$function = $module . '_cowpro_fund_repayment';
	if (function_exists($function)) {
		$result = $function($repayment_schedules);
		return $result;
	} else {
		$msg = array(
				'%function' => $function,
		);
		watchdog('custodian', '方法"%function"未定义', $msg, WATCHDOG_ERROR);
	}
}

/**
 * 查询用户余额，并拼装成可读信息
 * @param $uid
 * @return unknown
 */
function custodian_cowpro_fund_balance_contents($uid) {
	$module = custodian_default_provider_key();
	$function = $module . '_cowpro_fund_query_balance';
	if (function_exists($function)) {
		$balance = $function($uid);
		if ($balance ['success']) {
			$result = '<span>' . '余额：' . $balance ['balance'] . '元</span><br/>';
			$result = $result . '<span>' . '冻结：' . $balance ['lock'] . '元</span>';
		} else {
			$result = $balance ['msg'];
		}
		return $result;
	} else {
		$msg = array(
				'%function' => $function,
		);
		watchdog('custodian', '方法"%function"未定义', $msg, WATCHDOG_ERROR);
	}
}

/**
 * 查询用户余额
 * @param $uid
 * @return unknown
 */
function custodian_cowpro_fund_balance($uid) {
	$module = custodian_default_provider_key();
	$function = $module . '_cowpro_fund_query_balance';
	if (function_exists($function)) {
		$balance = $function($uid);
		return $balance;
	} else {
		$msg = array(
				'%function' => $function,
		);
		watchdog('custodian', '方法"%function"未定义', $msg, WATCHDOG_ERROR);
	}
}

/**
 * The user's account information is being displayed.
 * @param $account
 *   The user object on which the operation is being performed.
 * @param $view_mode
 *   View mode, e.g. 'full'.
 */
function custodian_user_view_fund($account, $view_mode) {
	$module = custodian_default_provider_key();
	$function = $module . '_user_view_fund';
	if (function_exists($function)) {
		$balance = $function($account->uid);
		$account->content['fund'] = array(
				'#type' => 'user_profile_category',
				'#title' => '账户资金详情',
				'#weight' => 0,
		);
		if ($balance ['success']) {
//			$account->content['fund']['fund_1'] = array(
//					'#type' => 'user_profile_item',
//					'#title' => '可提现余额',
//					'#markup' => $balance ['withdraw'],
//			);
//			$account->content['fund']['fund_2'] = array(
//					'#type' => 'user_profile_item',
//					'#title' => '可投标余额',
//					'#markup' => $balance ['balance'],
//			);
//			$account->content['fund']['fund_3'] = array(
//					'#type' => 'user_profile_item',
//					'#title' => '冻结金额',
//					'#markup' => $balance ['lock'],
//			);
			$account->content['fund']['fund_1'] = array(
					'#type' => 'user_profile_item',
					'#title' => '账户余额',
					'#markup' => $balance ['balance'],
			);
            if($balance ['lock']>0){
			  $account->content['fund']['fund_2'] = array(
					'#type' => 'user_profile_item',
					'#title' => ' ',
					'#markup' => '(其中'.$balance ['lock'].'元下个工作日可提现)',
			  );
            }
		} else {
			$account->content['fund']['fund_1'] = array(
					'#type' => 'user_profile_item',
					'#title' => '错误消息',
					'#markup' => $balance ['msg'],
			);
		}
	}
}

/**
 * 购买债权
 * @param $amount 购买价格
 * @param $issuing_id 标的编号
 * @param $seller_uid 出让人的uid
 * @param $buyer_uid 买入人的uid
 * @return unknown
 */
function custodian_cowpro_fund_buy_creditor_assignment($amount, $issuing_id, $seller_uid, $buyer_uid) {
	$module = custodian_default_provider_key();
	$function = $module . '_cowpro_fund_buy_creditor_assignment';
	if (function_exists($function)) {
		$result = $function($amount, $issuing_id, $seller_uid, $buyer_uid);
		return $result;
	} else {
		$msg = array(
				'%function' => $function,
		);
		watchdog('custodian', '方法"%function"未定义', $msg, WATCHDOG_ERROR);
	}
}

/**
 * 读取用户余额
 * @param unknown $account
 * @return NULL
 */
function custodian_get_balance($account) {
	$module = custodian_default_provider_key();
	$function = $module . '_user_view_fund';
	$balance = NULL;
	if (function_exists($function)) {
		$balance = $function($account->uid);
	}
	return $balance;
}

/**
 * 获得托管银行对用户银行卡的操作接口的驱动
 * @param 银行卡信息 $profile
 * $profile->card_no 银行卡号码
 * $profile->card_no_original 原银行卡号码（如果是更新银行卡，就有这个属性，否则，这个属性为‘’）
 * $profile->cardholder 持卡人姓名
 * $profile->bank_name 开户银行
 * $profile->bank_branch 银行营业网点
 * $profile->province 所在地（省）
 * $profile->city 所在地（市）
 * $profile->mobile 在银行登记的手机号
 * $profile->verified 如果已通过银行验证，这个属性为 TRUE，否则，这个属性为 FALSE
 * @return
 * 如果托管银行没有对银行卡的操作接口，返回 NULL
 * 否则，返回一个操作标签，这个操作标签可以是“绑定银行卡”、“更新银行卡”……等等
 */
function custodian_get_bank_card_operator($profile) {
	$module = custodian_default_provider_key();
	$function = $module . '_get_bank_card_operator';
	$result = NULL;
	if (function_exists($function)) {
		$result = $function($profile);
	}
	return $result;
}

function custodian_bank_card_editable() {
	$module = custodian_default_provider_key();
	$function = $module . '_bank_card_editable';
	$result = NULL;
	if (function_exists($function)) {
		$result = $function();
	} else {
		$result = TRUE;
	}
	return $result;
}

/**
 * 驱动托管银行对银行卡操作的接口
 * @param $operator 在 custodian_get_bank_card_operator() 方法中返回的操作标签
 * @param 银行卡信息  $profile
 * $profile 对象的属性，可以参考 custodian_get_bank_card_operator() 方法的注释
 * @return NULL
 */
function custodian_bank_card_operator_submit($operator, $profile) {
	$module = custodian_default_provider_key();
	$function = $module . '_bank_card_operator_submit';
	$result = NULL;
	if (function_exists($function)) {
		$result = $function($operator, $profile);
	}
	return $result;
}

/**
 * 获得用户在托管银行充值时可以选用的充值方式的列表
 *
 * @return 如果托管银行不需要用户选择充值方式，就返回 NULL
 * 否则，要返回一个数组结构，包含用户可选的充值方式，例如，下面是乾多多返回的可选充值方式的样例：
 * 	$result = array(
 * 		'2' => '快捷支付',
 * 		'' => '网银充值',
 * 		'3' => '汇款充值',
 * 		'4' => '企业网银',
 * );
 */
function custodian_get_topup_method() {
	$module = custodian_default_provider_key();
	$function = $module . '_get_topup_method';
	$result = NULL;
	if (function_exists($function)) {
		$result = $function();
	}
	return $result;
}

/**
 * 获得托管银行对用户银行账户的操作接口的驱动
 * @return
 * 如果托管银行没有对银行账户的操作接口，返回 NULL
 * 否则，返回一个数组类型，数组中的每一个元素对应一个操作标签，这个操作标签可以是“重置交易密码”……等等
 * 例如，返回的结果可以是下面形式：
 * array (
 * 	'1' => '重置交易密码',
 * 	'2' => 'xxxxxx',
 * )
 * 注意：数组中的key在接口中会被忽略，只有数组中的value起作用
 */
function custodian_get_bank_account_operator() {
	$module = custodian_default_provider_key();
	$function = $module . '_get_bank_account_operator';
	$result = NULL;
	if (function_exists($function)) {
		$result = $function();
	}
	return $result;
}

/**
 * 驱动托管银行对银行账户操作的接口
 * @param $operator 在 custodian_get_bank_account_operator() 方法中返回的操作标签
 * @return NULL
 */
function custodian_bank_account_operator_submit($operator) {
	$module = custodian_default_provider_key();
	$function = $module . '_bank_account_operator_submit';
	$result = NULL;
	if (function_exists($function)) {
		$result = $function($operator);
	}
	return $result;
}
